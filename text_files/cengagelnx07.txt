**COMMAND INPUT & OUTPUT**:ok
Command input & output are repsented by labels known as __ __:file descriptors
For each command that can be manipulated by the shell, there are __ file descriptors:3
The 3 file descriptors are, __, __, __:STDIN STDOUT STDERR
Refers to information processed by command during execution, __ __:standard input
Refers to normal output of command, __ __:standard output
Refers to any error messages generated by the command, __ __:standard error
Both __ & __ are dislayed to the terminal screen by default:stdin stderr
The order of redirection __ __ matter:does not
COMMAND, only acccpets STDIN, used to replace characters, __:tr
You can use __ metacharacters to redirect multiple lines of STDIN from keyboard into command:<<
<< is often called a __ __:here document
A << requires a special __ that signifies the last line:delimiter
COMMAND, STDOUT sent to file instead of terminal, _:1>
COMMAND, STDOUT sent to file instead of terminal, _:>
COMMAND, STDERR sent to file instead of terminal, _:2>
COMMAND, STDOUT sent to file A, STDERR sent to file B:1>fileA 2> fileB
COMMAND, STDOUT sent to file A, STDERR sent to file B:>fileA 2> fileB
COMMAND, both STDOUT & STDERR sent to 'file':1>file 2>&1
COMMAND, both STDOUT & STDERR sent to 'file':>file 2>&1
the Pipe __ metacharacter takes __ and pipes it to __:|stdout stdin
Any command that can STDIN & transform it to STDOUT is called a __:filter
COMMAND, sort lines alphanumerically, __:sort
COMMAND, reverse-sorts line alphanumerically, __:sort -r
COMMAND, counts the number of lines, words & characters, __:wc
COMMAND, counts the number of lines, __:wc -l
COMMAND, counts the number of words, __:wc -w
COMMAND, counts the number of characters, __:wc -c
COMMAND, formats text for printing, __:pr
COMMAND, formats text to be double spaced, __:pr -d
COMMAND, omit duplicate results, __:uniq
COMMAND, displays columns of delimited data, __:cut
COMMAND, combines lines together from 2 separate sources, __:paste
COMMAND, sends STDIN to file, STDOUT to terminal, __:tee
COMMAND, numbers lines __:nl
COMMAND, extracts, maniplates & formats text using pattern action statements, __:awk
COMMAND, manipulates text using search & replace expressions, __:sed
**SHELL VARIABLES**:ok
Reserved portion of memory containing information to be accessed, __:variable
Most variables in the shell are referred to as __ variables:environment
User can create their own variables called __-__ variables:user defined
COMMAND, list all variables, default, system, user-defined, __:set
COMMAND, to view contents of a specific variable, __:echo $variable
variable that allows users to execute commands by typing the command name alone, __:path
Most commands are represented by an __ file on the hard drive:executable
To execute a command, you can type the __ pathname, __ pathname or __ name:absolute relative command
COMMAND, execute ls via absolute, relative, and command name, __ ,__ ,__:/usr/bin/ls ../usr/bin/ls ls
COMMAND, list previously executed commands, _:history
COMMAND, recall & execute command 105, __:!105
Most commands that are run by the shell are run in a separate __, which is created by the __:subshell shell
Any variables created in the current shell are __ __ to those subshells:not available
Thus, if a user creates a variable to be used within certain programs, the variable should be __:exported
COMMAND, create new variable MYVAR, set = hi, __:MYVAR="hi"
COMMAND, makes variables available to subshells, __:export
COMMAND, export new var MYVAR, & MYVAR = hi,__:export MYVAR="hi"
COMMAND, view EXPORTED & user-defined varaibles in shell, __:env
COMMAND, view EXPORTED variables in your shell, __:printenv
COMMAND, remove variable from shell memory, __:unset
COMMAND, create short cuts for commands, __:alias
COMMAND, create alias for cp to interactive mode, __:alias cp="cp -i"
COMMAND, remove alias, __:unalias
**ENVIRONMENT FILES**:ok
Recall that variables are stored in __:memory
When user exits a shell, all variables stored in memory are __ along with the __ itself:destroyed shell
To ensure that variables are always accessible to a shell (ok continue on next line):ok
, you must place variables in a file that is executed each time a user log:ok
Files that execute everytime user logs in & starts a shell, __ __:environment files
Common BASH shell enviroment file & the order in which they execute:
1.) __:/etc/profile
2.) __:/etc/profile.d
3.) __:/etc/bashrc
4.) __:~/.bashrc
5.) __:~/.bash_profile
6.) __:~/.bash_login
7.) __:~/.profile
The BASH runtime configuration files, __ & __:/etc/bashrc ~/.bashrc
/etc/bashrc & ~/.bashrc are typically used to set __ & __ that must be __ in the shell:aliases variables present
/etc/bashrc & ~/.bashrc are executed __ after a new login as well as when new shell is created after login:immediately
The /etc/bashrc contains __ & __ for __ users on the system:aliases variables all
The ~'.bashrc contains __ & __ for _ user on the system:aliases variables specific
The __ file & __ directory are executed after login for __ users on the system:/etc/profile /etc/profile.d
After /etc/profile & /etc/profile.d/ are finished executing, the __ directory of the user is searched for __ __ files:home hidden environment
Hidden home environment files are __, __, __:.bash_profile .bash_login .profile
If these files exist, the 1st one found is executed, as a result only __ of these files is typically used:one
Any variables in these files overrides those set in, __, __, __, __ due to order of execution:/etc/profile /etc/profile.d /etc/bashrc ~/.bashrc
**SHELL SCRIPTS**:ok
the # in shell scripts is called __ or __:hashpling shebang
the # specifies the __ to the shell that interprets the contents of the shell:pathname
COMMAND, read permission to execute script 'myscript', __:bash myscript
COMMAND, bash to execute shell script with troubleshooting options, __:bash -xv
COMMAND, echo option to allow backslash (\) notation, __:echo -e
COMMAND, takes user input from STDIN & places it in a variable, _:read
For a decision construct to work, there must be a condition that returns T or F, known as a _ _:exit status
Exit status of 0 equals, _:true
Exit status of 1-255 equals, _:false
Common Test Statements:ok
TEST STATEMENT, String A is equal to String B, _:[ a = b ]
TEST STATEMENT, String A is not equal to String B, _:[ a != b ]
TEST STATEMENT, String A is is numerically equal to String B, _:[ a -eq b ]
TEST STATEMENT, String A is numerically not equal String B, _:[ a -ne b ]
TEST STATEMENT, String A is numerically less than to String B, _:[ a -lt b ]
TEST STATEMENT, String A is numerically greater than to String B, _:[ a -gt b ]
TEST STATEMENT, String A is numerically less than or = to String B, _:[ a -le b ]
TEST STATEMENT, String A is numerically greater than or = to String B, _:[ a -ge b ]
If statement ends with __:fi
Case statement ends with __:esac
COMMAND, command on right is executed only if command of left executed, __:&&
COMMAND, command on right is executed only is command on left is not successful, __:||
COMMAND, command substition, __:backquotes
**VERSION CONTROL**:ok
A system to keep track of changes that you make to files you create, _ _:version control
Each snapshot in Git is called a __:commit
Downloading a copy of the original file is called, __:cloning
The files & associated commits managed by git are stored in a directory, _ _:git repo
COMMAND, git config user name "my name", __:git config --global user.name "my name"
COMMAND, git config user email "@domain.com, __:git config --global user.email "myname@domain.com"
COMMAND, git config main branch, __:git config --global init.defaultBranch main
COMMAND, git creates hidden .git subdirectory, __ __:git init
COMMAND, git indicates what is being tracked by git, __ __:git status
COMMAND, git add files to git to be tracked, __ __:git add
The process of adding files to git to be tracked is called, __:staginging
COMMAND, git create snapshot of file/s for first commit, __ __ - __:git commit -m "first commit"
To exclude files within Git Repo from being STAGED, add their names to __ file:.gitignore
COMMAND, git, see list of all mods to files, __:git log
The word __ is used to refer to the most recent commit in the output:head
COMMAND, git, revert to previous version of files within commit, _-:git reset --hard
To reset git version, how many of the FIRST numbers of commit must be included in git reset, _:7
COMMAND, git, removes file from git index, _ _:git rm
adds a label to most recent commit, _ _ _:git tag label
Creates a new branch & switches to it, _ _ - _:git checkout -b branch
Switches to a different branch, _ _ _:git checkout branch
Views branches on repo, _ _:git branch
Deletes branch, _ _ - _:git branch -d branch
Pushes branch to the original repo location, _ _ _ _:git push origin branch
Pulls branch from the original repo location, _ _ _ _:git pull origin branch
